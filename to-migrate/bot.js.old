// Require modules
const pool = require('./utils/getpool.js/index.js');
const db = require('./db/db.js')(pool);
const cmd = require('./cmd/cmd.js')(db);

const moment = require('moment-timezone');
const momentDurationFormatSetup = require("moment-duration-format");
momentDurationFormatSetup(moment);
typeof moment.duration.fn.format === "function";
typeof moment.duration.format === "function";
moment.locale('en-gb');

// Variable declarations
let activities,
    registeredUsers,
    events,
    history,
    statusCounter = 0;

// Functions and Helpers
let Timer = {
    map: new Map(),
    set: (key, func, time) => {
        if (time instanceof Date) {
            time = time.getTime() - Date.now();
        }
        if (time < 0) {
            throw new Error("Can't set timer in the past");
        }
        Timer.cancel(key);
        Timer.map.set(key, setTimeout(func, time));
    },
    cancel: key => {
        clearTimeout(Timer.map.get(key));
    }
}

async function pullEvents() {
    events = await db.getEvents();
    createTimers();
}

async function pullHistory() {
    history = await db.getHistory();
}

cmd.client.on("ready", async () => {
    console.log(`Successfully connected to Discord`);
    activities = await db.getActivities();
    registeredUsers = await db.getUsers();
    await pullEvents();
    await pullHistory();
    cmd.client.on("message", handleMessage);
    setInterval(() => {
        let joinableEvents = events.filter((el) => { return (el.fireteam.split(',').length < 6); });
        let newStatus;

        if (joinableEvents.length > 0) {
            statusCounter = (statusCounter + 1) % joinableEvents.length;
            newStatus = `!join ${joinableEvents[statusCounter].raidId}`;
        } else {
            newStatus = cmd.client.user.setActivity(cmd.config.status);
        }

        cmd.client.user.setActivity(newStatus);
    }, 120000);
});

async function handleMessage(message) {
    if (message.author.bot) return;
    if (message.content.indexOf(cmd.config.prefix) !== 0) return;

    const args = message.content.slice(cmd.config.prefix.length).trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);
    args.forEach((arg, index) => {
        args[index] = arg.replace(/"/g, "");
    });

    const command = args.shift().toLowerCase();

    message.channel.startTyping();

    if (command === "notify") {
        let notify;
        let user = registeredUsers.find(o => o.discordId == message.author.id);

        if (!user) {
            message.channel.send('Unable to find user - have you registered?');
            message.channel.stopTyping();
            return;
        }

        if (!args[0]) {
            message.reply(`please provide either 'on' or 'off'.`);
            message.channel.stopTyping();
            return;
        }

        if (args[0] === 'on') {
            notify = true;
        } else if (args[0] === 'off') {
            notify = false;
        } else {
            message.reply(`invalid arguments supplied - provide either 'on' or 'off'.`);
            message.channel.stopTyping();
            return;
        }

        try {
            await db.putUserNotification(message.author.id, notify);
            registeredUsers = await db.getUsers();
            message.react("✅");
        } catch (err) {
            console.log(err);
            message.channel.stopTyping();
            message.react("❌");
        }



    message.channel.stopTyping(true);
};